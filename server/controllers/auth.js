import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

/* 
respond - это объект, представляющий собой ответ HTTP, который сервер отправляет обратно клиенту (например, веб-браузеру) после получения запроса. 
Объект имеет различные методы и свойства, позволяющие настраивать ответ, например, задавать код статуса, заголовки, тело и т.д.
*/
export const register = async (request, respond) => {
  try {
    // /=======USER_INFO=======/
    const {
      firstName,
      lastName,
      email,
      password,
      picturePath,
      friends,
      location,
      occupation,
    } = request.body;
    // /=======HASH_PASSWORD=======/
    /* 
    bcrypt - это название модуля, предоставляющего функции для хэширования паролей. 
    Хеширование - это процесс, который преобразует пароль в строку символов фиксированной длины, которую трудно изменить. 
    Это позволяет безопаснее хранить пароли в базе данных, поскольку даже если кто-то украдет базу данных, он не сможет легко получить исходные пароли.
    */
    /* 
    Метод genSalt() ,объекта bcrypt,генерирует случайную соль(salt).
    Соль(salt) - это случайная строка, которая добавляется к паролю перед его хэшированием. 
    Это усложняет злоумышленникам задачу угадывания пароля по словарю обычных паролей и их хэшей, 
    поскольку им придется перебрать все возможные варианты соли.

        rounds - необязательный аргумент, определяющий стоимость обработки данных. 
        Чем выше раунды, тем надежнее соль, но и тем больше времени требуется на ее генерацию. 
        Значение по умолчанию равно 10.

        minor - необязательный аргумент, который указывает младшую версию bcrypt для использования. 
        Значение по умолчанию - 'b', это наиболее безопасная и рекомендуемая версия.

        cb - Это обязательный аргумент, представляющий собой функцию обратного вызова, 
        которая будет запущена после того, как соль будет сгенерирована. 
        Функция обратного вызова принимает два параметра: 
            Объект ошибки
            Сгенерированную соль
    */
    /* 
    Hash-функция принимает два входных параметра: 
        password 
        salt
    password - это обычный текстовый пароль, который вы хотите защитить. 
    salt - это случайная строка символов, которую вы добавляете к паролю, чтобы его было сложнее угадать или взломать. 
    Hash-функция использует специальный алгоритм для преобразования пароля и соли в новую строку символов, называемую хэшем.

    Hash - это способ скрыть исходный пароль, так что даже если кто-то увидит его, он не сможет легко понять, что это за пароль. 
    Hash - это то, что вы храните в своей базе данных вместо пароля в виде обычного текста.
    */
    const passwordHash = await bcrypt.hash(
      password,
      await bcrypt.genSalt(12, 'b')
    );

    // /=======CREATE_NEW_USER=======/
    const newUser = new User({
      firstName,
      lastName,
      email,
      password: passwordHash,
      picturePath,
      friends,
      location,
      occupation,
      viewedProfile: Math.floor(Math.random() * 100),
      impressions: Math.floor(Math.random() * 100),
    });
    /* 
    status(201) - это метод, который устанавливает код статуса в ответе на значение 201, что означает "Создан". 
    Это говорит о том, что запрос был успешным и на сервере был создан новый ресурс (например, пользователь). 
    Можно использовать различные коды состояния в зависимости от результата запроса, 
    например 200 для "OK", 400 для ""Неудачный запрос", 500 для "Внутренняя ошибка сервера" и т.д.
    */
    /* 
    json() - это метод, который приводит тело ответа к формату JSON(JavaScript Object Notation), 
    который является распространенным способом обмена данными между приложениями.
   */
    /* 
    Методу json() передается аргумент, который представляет собой данные, отправляемые в формате JSON. 
    В данном случае аргументом является await newUser.save() - асинхронная функция, 
    которая сохраняет новый объект пользователя (созданный на основе модели UserModel) в базе данных (например, MongoDB) 
    и возвращает обещание(promise), содержащиее ссылку на сохраненный объект пользователя. 
    Ключевое слово await приостанавливает выполнение кода до тех пор, пока обещание(promise) не будет выполнено(resolve) или отклонено(reject), 
    а затем возвращает значение обещания(promise). 
    Это позволяет писать асинхронный код синхронно, без использования обратных вызовов или методов .then().
    */
    respond.status(201).json(await newUser.save());
  } catch (error) {
    console.error(`Auth error : ${error}`);
    respond.status(500).json({ error: error.message });
  }
};
